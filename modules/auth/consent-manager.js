const LineManager = require('../core/line-manager');
const SheetsManager = require('./sheets');

class ConsentManager {
  constructor() {
    this.sheetsManager = new SheetsManager();
    this.waitingForUserInfo = new Set();
    this.sheetsReady = false;
    this.initializeSheets();
  }

  async initializeSheets() {
    try {
      this.sheetsReady = await this.sheetsManager.ensureInitialized();
      if (!this.sheetsReady) {
        console.log('‚ö†Ô∏è  Google Sheets not available - using fallback mode');
      }
    } catch (error) {
      console.error('‚ùå Failed to initialize sheets:', error);
    }
  }

  async handleUserMessage(userId, userMessage, replyToken) {
    console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user ${userId}: ${userMessage}`);
    
    let hasConsented = false;
    
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ sheets ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    if (this.sheetsReady) {
      const userData = await this.sheetsManager.getUserById(userId);
      hasConsented = userData && userData.consent === '‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°';
    } else {
      // ‚úÖ Fallback: ‡πÉ‡∏ä‡πâ memory-based consent ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
      console.log('‚ö†Ô∏è  Using memory-based consent (sheets not available)');
      hasConsented = this.checkMemoryConsent(userId);
    }
    
    if (!hasConsented) {
      return await this.handleNewUser(userId, userMessage, replyToken);
    } else {
      if (this.waitingForUserInfo.has(userId)) {
        return await this.handleUserInfoInput(userId, userMessage, replyToken);
      }
      return await this.handleExistingUser(userId, userMessage, replyToken);
    }
  }

  // ‚úÖ Fallback method ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
  checkMemoryConsent(userId) {
    // ‡πÉ‡∏ä‡πâ memory-based consent ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ sheets ‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°
    return false; // ‡πÉ‡∏´‡πâ‡∏Ç‡∏≠ consent ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  }

  // methods ‡∏≠‡∏∑‡πà‡∏ô‡πÜ...
}
