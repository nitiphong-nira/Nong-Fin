const LineManager = require('../core/line-manager');
const { createConsentFlex } = require('../messages/flex-consent');

class ConsentManager {
  constructor() {
    this.userConsentDB = new Map(); // ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÅ‡∏ó‡∏ô Google Sheets
  }

  checkConsentResponse(text) {
    const response = text.toLowerCase().trim();
    if (['‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°', 'yes', 'y', '‡∏ï‡∏Å‡∏•‡∏á'].includes(response)) return 'accepted';
    if (['‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°', 'no', 'n', '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò'].includes(response)) return 'rejected';
    return 'other';
  }

  async handleUserMessage(userId, userMessage, replyToken) {
    console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user ${userId}: ${userMessage}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (!this.userConsentDB.has(userId)) {
      return await this.handleNewUser(userId, userMessage, replyToken);
    } else {
      return await this.handleExistingUser(userId, userMessage, replyToken);
    }
  }

 async handleNewUser(userId, userMessage, replyToken) {
  console.log('üîç [DEBUG] Testing message send...');
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÅ‡∏ö‡∏ö manual
  try {
    const axios = require('axios');
    const response = await axios.post(
      'https://api.line.me/v2/bot/message/reply',
      {
        replyToken: replyToken,
        messages: [{ 
          type: 'text', 
          text: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å manual axios' 
        }]
      },
      {
        headers: {
          'Authorization': `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );
    console.log('‚úÖ Manual send success:', response.status);
  } catch (error) {
    console.error('‚ùå Manual send failed:', error.response?.data);
  }
  
  return 'sent_consent';
}

  async handleExistingUser(userId, userMessage, replyToken) {
    const userData = this.userConsentDB.get(userId);
    
    if (!userData.consented) {
      // ‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤
      await LineManager.sendTextMessage(replyToken, '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£');
      return 'rejected_user';
    }
    
    // ‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß - ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ keyword handler
    console.log(`‚úÖ User ${userId} ‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ keyword handler`);
    return 'consented_user';
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  hasUserConsented(userId) {
    const userData = this.userConsentDB.get(userId);
    return userData ? userData.consented : false;
  }
}

module.exports = ConsentManager;
