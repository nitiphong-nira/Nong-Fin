const LineManager = require('../core/line-manager');

class ConsentManager {
  constructor() {
    console.log('üéØ ConsentManager initialized');
    this.waitingForUserInfo = new Set();
    
    this.sheetsManager = {
      getUserById: async (userId) => {
        console.log(`üîç Fallback: Checking user ${userId}`);
        return null;
      },
      saveConsent: async (userId, status) => {
        console.log(`üìù Fallback: Saved consent for ${userId}: ${status}`);
        return true;
      },
      saveUserProfile: async (userId, profile) => {
        console.log(`üìù Fallback: Saved profile for ${userId}`, profile);
        return true;
      },
      checkUserConsent: async (userId) => false
    };
  }

  async handleUserMessage(userId, userMessage, replyToken) {
    try {
      console.log(`üîç ConsentManager: User ${userId} -> ${userMessage}`);
      
      const hasConsented = await this.sheetsManager.checkUserConsent(userId);
      
      if (!hasConsented) {
        return await this.handleNewUser(userId, userMessage, replyToken);
      } else {
        if (this.waitingForUserInfo.has(userId)) {
          return await this.handleUserInfoInput(userId, userMessage, replyToken);
        }
        return 'consented_user';
      }
    } catch (error) {
      console.error('‚ùå ConsentManager error:', error);
      await LineManager.sendTextMessage(replyToken, '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤');
      return 'error';
    }
  }

  async handleNewUser(userId, userMessage, replyToken) {
  console.log(`üÜï Handling new user: ${userId}, message: ${userMessage}`);
  
  if (userMessage === '‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°') {
    await this.sheetsManager.saveConsent(userId, '‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°');
    await LineManager.linkRichMenuToUser(userId);
    await this.requestPersonalInfo(replyToken);
    this.waitingForUserInfo.add(userId);
    console.log(`‚úÖ User ${userId} ‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß - ‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß`);
    return 'accepted_awaiting_info';
  } else if (userMessage === '‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°') {
    await this.sheetsManager.saveConsent(userId, '‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°');
    await LineManager.sendTextMessage(replyToken, '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à üòä');
    return 'rejected';
  } else {
    try {
      await LineManager.sendConsentFlexMessage(replyToken);
      return 'sent_consent';
    } catch (error) {
      console.error('‚ùå Failed to send flex message:', error);
      // Fallback to text message
      await LineManager.sendTextMessage(replyToken,
        'üìú **‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß**\n\n' +
        '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≠‡∏á‡∏ü‡∏¥‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?\n\n' +
        '‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°"'
      );
      return 'sent_consent_fallback';
    }
  }
}

  async handleUserInfoInput(userId, userMessage, replyToken) {
    console.log(`üìù User info input: ${userMessage}`);
    const userProfile = this.parseUserInfo(userMessage);
    if (userProfile) {
      await this.sheetsManager.saveUserProfile(userId, userProfile);
      this.waitingForUserInfo.delete(userId);
      await LineManager.sendTextMessage(replyToken, `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!\n‡∏ä‡∏∑‡πà‡∏≠: ${userProfile.firstName} ${userProfile.lastName}\n‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${userProfile.email}`);
      return 'info_saved';
    } else {
      await LineManager.sendTextMessage(replyToken, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô\n‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡∏ä‡∏∑‡πà‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏≠‡∏µ‡πÄ‡∏°‡∏•\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ somchai@email.com');
      return 'invalid_info_format';
    }
  }

  parseUserInfo(text) {
    const parts = text.trim().split(/\s+/);
    if (parts.length >= 3) {
      return { firstName: parts[0], lastName: parts[1], email: parts[2] };
    }
    return null;
  }

  async requestPersonalInfo(replyToken) {
    await LineManager.sendTextMessage(replyToken, 'üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß\n‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡∏ä‡∏∑‡πà‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏≠‡∏µ‡πÄ‡∏°‡∏•\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ somchai@email.com');
  }
}

module.exports = ConsentManager;
