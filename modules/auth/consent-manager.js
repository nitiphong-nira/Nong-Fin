const LineManager = require('../core/line-manager');
const SheetsManager = require('./sheets'); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Google Sheets
const { createConsentMessage } = require('../messages/flex-consent'); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Rich Message

class ConsentManager {
  constructor() {
    this.sheetsManager = new SheetsManager(); // ‚úÖ ‡πÉ‡∏ä‡πâ Google Sheets ‡πÅ‡∏ó‡∏ô Map
  }

  // ‚úÖ ‡∏•‡∏ö method ‡πÄ‡∏Å‡πà‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô
  async checkConsentResponse(text) {
    const response = text.trim();
    if (response === '‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°') return 'accepted';
    if (response === '‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°') return 'rejected';
    return 'invalid'; // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î
  }

  async handleUserMessage(userId, userMessage, replyToken) {
    console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user ${userId}: ${userMessage}`);
    
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Google Sheets ‡πÅ‡∏ó‡∏ô memory
    const hasConsented = await this.sheetsManager.checkUserConsent(userId);
    
    if (!hasConsented) {
      return await this.handleNewUser(userId, userMessage, replyToken);
    } else {
      return await this.handleExistingUser(userId, userMessage, replyToken);
    }
  }

  async handleNewUser(userId, userMessage, replyToken) {
    const consentResult = this.checkConsentResponse(userMessage);
    
    if (consentResult === 'accepted') {
      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏ô Google Sheets
      await this.sheetsManager.saveUserConsent(userId, '‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°');
      
      // ‚úÖ ‡∏™‡πà‡∏á Rich Menu ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      await LineManager.sendRichMenu(userId);
      
      // ‚úÖ ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
      await this.requestPersonalInfo(replyToken);
      
      console.log(`‚úÖ User ${userId} ‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß`);
      return 'accepted';
      
    } else if (consentResult === 'rejected') {
      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏ô Google Sheets
      await this.sheetsManager.saveUserConsent(userId, '‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°');
      await LineManager.sendTextMessage(replyToken, '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à üòä');
      console.log(`‚ùå User ${userId} ‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°`);
      return 'rejected';
      
    } else {
      // ‚úÖ ‡∏™‡πà‡∏á Rich Message ‡πÅ‡∏ó‡∏ô text ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
      await LineManager.sendFlexMessage(replyToken, createConsentMessage());
      console.log(`üìù ‡∏™‡πà‡∏á Consent Rich Message ‡πÉ‡∏´‡πâ ${userId}`);
      return 'sent_consent';
    }
  }

  async handleExistingUser(userId, userMessage, replyToken) {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å Google Sheets
    const hasConsented = await this.sheetsManager.checkUserConsent(userId);
    
    if (!hasConsented) {
      await LineManager.sendTextMessage(replyToken, '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£');
      return 'rejected_user';
    }
    
    // ‚úÖ ‡∏™‡πà‡∏á Rich Menu ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß
    await LineManager.sendRichMenu(userId);
    return 'consented_user';
  }

  async requestPersonalInfo(replyToken) {
    // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
    const message = {
      type: 'text',
      text: 'üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß\n‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡∏ä‡∏∑‡πà‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏≠‡∏µ‡πÄ‡∏°‡∏•\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ somchai@email.com'
    };
    await LineManager.sendMessage(replyToken, message);
  }

  async hasUserConsented(userId) {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Google Sheets
    return await this.sheetsManager.checkUserConsent(userId);
  }
}

module.exports = ConsentManager;
