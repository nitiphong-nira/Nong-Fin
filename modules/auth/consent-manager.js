const LineManager = require('../core/line-manager');
const SheetsManager = require('./sheets');

class ConsentManager {
  constructor() {
    this.sheetsManager = new SheetsManager();
    this.waitingForUserInfo = new Set();
  }

  async handleUserMessage(userId, userMessage, replyToken) {
    console.log(`üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user ${userId}: ${userMessage}`);
    
    // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô method ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô sheets.js
    const userData = await this.sheetsManager.getUserById(userId);
    const hasConsented = userData && userData.consent === '‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°';
    
    if (!hasConsented) {
      return await this.handleNewUser(userId, userMessage, replyToken);
    } else {
      if (this.waitingForUserInfo.has(userId)) {
        return await this.handleUserInfoInput(userId, userMessage, replyToken);
      }
      return await this.handleExistingUser(userId, userMessage, replyToken);
    }
  }

  async handleNewUser(userId, userMessage, replyToken) {
    if (userMessage === '‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°') {
      // ‚úÖ ‡πÉ‡∏ä‡πâ method ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      await this.sheetsManager.saveConsent(userId, '‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°');
      
      // ‚úÖ ‡πÉ‡∏ä‡πâ method ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å line-manager ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
      await LineManager.linkRichMenuToUser(userId);
      
      await this.requestPersonalInfo(replyToken);
      this.waitingForUserInfo.add(userId);
      
      console.log(`‚úÖ User ${userId} ‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß - ‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß`);
      return 'accepted_awaiting_info';
      
    } else if (userMessage === '‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°') {
      await this.sheetsManager.saveConsent(userId, '‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°');
      await LineManager.sendTextMessage(replyToken, '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à üòä');
      return 'rejected';
      
    } else {
      // ‚úÖ ‡πÉ‡∏ä‡πâ Flex Message ‡πÅ‡∏ó‡∏ô fallback
      await LineManager.sendConsentFlexMessage(replyToken);
      return 'sent_consent';
    }
  }

  async handleExistingUser(userId, userMessage, replyToken) {
    // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° method ‡∏ô‡∏µ‡πâ (‡∏´‡∏≤‡∏¢‡πÑ‡∏õ)
    const userData = await this.sheetsManager.getUserById(userId);
    const hasConsented = userData && userData.consent === '‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°';
    
    if (!hasConsented) {
      await LineManager.sendTextMessage(replyToken, '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£');
      return 'rejected_user';
    }
    
    // ‚úÖ ‡∏™‡πà‡∏á Rich Menu ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß
    await LineManager.linkRichMenuToUser(userId);
    return 'consented_user';
  }

  async handleUserInfoInput(userId, userMessage, replyToken) {
    // ‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢ method ‡∏°‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    const userProfile = this.parseUserInfo(userMessage);
    
    if (userProfile) {
      // ‚úÖ ‡πÉ‡∏ä‡πâ method ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      await this.sheetsManager.saveUserProfile(userId, userProfile);
      this.waitingForUserInfo.delete(userId);
      
      await LineManager.sendTextMessage(replyToken, 
        `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!\n‡∏ä‡∏∑‡πà‡∏≠: ${userProfile.firstName} ${userProfile.lastName}\n‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${userProfile.email}`
      );
      return 'info_saved';
    } else {
      await LineManager.sendTextMessage(replyToken,
        '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô\n‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡∏ä‡∏∑‡πà‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏≠‡∏µ‡πÄ‡∏°‡∏•\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ somchai@email.com'
      );
      return 'invalid_info_format';
    }
  }

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° method ‡πÉ‡∏´‡∏°‡πà
  parseUserInfo(text) {
    const parts = text.trim().split(/\s+/);
    if (parts.length >= 3) {
      return {
        firstName: parts[0],
        lastName: parts[1],
        email: parts[2]
      };
    }
    return null;
  }

  // ‚ùå ‡∏•‡∏ö method ‡∏ô‡∏µ‡πâ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß)
  // async sendFallbackConsentMessage(replyToken) { ... }

  // ‚ùå ‡∏•‡∏ö method ‡∏ô‡∏µ‡πâ (‡πÉ‡∏ä‡πâ LineManager.linkRichMenuToUser ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
  // async sendToRichMenu(userId) { ... }

  async requestPersonalInfo(replyToken) {
    await LineManager.sendTextMessage(replyToken,
      'üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß\n‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡∏ä‡∏∑‡πà‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏≠‡∏µ‡πÄ‡∏°‡∏•\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ somchai@email.com'
    );
  }

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° method ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°
  async hasUserConsented(userId) {
    const userData = await this.sheetsManager.getUserById(userId);
    return userData && userData.consent === '‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°';
  }
}

module.exports = ConsentManager;
