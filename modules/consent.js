import { replyMessage } from './utils.js';
import { getSheetsClient } from './sheets.js';

const SHEET_NAME = 'Finway_PDPA_Consent';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Consent
async function saveConsentToSheet(userId, consentResult) {
  try {
    const sheets = await getSheetsClient();
    
    await sheets.spreadsheets.values.append({
      spreadsheetId: process.env.GOOGLE_SHEET_ID,
      range: `${SHEET_NAME}!A:F`,
      valueInputOption: 'RAW',
      insertDataOption: 'INSERT_ROWS',
      resource: {
        values: [[
          new Date().toISOString(),
          '', '', userId, '', consentResult
        ]]
      }
    });
    
    console.log(`‚úÖ Consent saved for: ${userId}`);
  } catch (error) {
    console.error('‚ùå Error saving consent:', error.message);
  }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Consent ‡∏à‡∏≤‡∏Å Line ID
async function getUserConsentFromSheet(userId) {
  try {
    const sheets = await getSheetsClient();
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: process.env.GOOGLE_SHEET_ID,
      range: `${SHEET_NAME}!A:F`,
    });
    
    const rows = response.data.values || [];
    const userAccepted = rows.find(row => row[3] === userId && row[5] === 'accepted');
    
    return userAccepted ? { consented: true } : null;
  } catch (error) {
    console.error('‚ùå Error reading consent:', error.message);
    return null;
  }
}

export async function hasUserConsented(userId) {
  const consentData = await getUserConsentFromSheet(userId);
  return consentData ? consentData.consented : false;
}

export async function sendConsentForm(replyToken, userId) {
  const consentMessage = `üìã ‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô...`;
  await replyMessage(replyToken, consentMessage);
}

export async function handleConsentFlow(event, userMsg, userId) {
  const hasConsented = await hasUserConsented(userId);
  
  if (hasConsented) {
    const { handleFinanceCommand } = await import('./finance.js');
    await handleFinanceCommand(event, userMsg, userId);
    return;
  }

  if (userMsg === '‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö') {
    await saveConsentToSheet(userId, 'accepted');
    await replyMessage(event.replyToken, `‚úÖ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à!`);
  } 
  else if (userMsg === '‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö') {
    await saveConsentToSheet(userId, 'rejected');
    await replyMessage(event.replyToken, `‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡∏Å‡πà‡∏≠‡∏ô`);
  }
  else {
    await sendConsentForm(event.replyToken, userId);
  }
}
