import { replyMessage } from './utils.js';
import { getSheetsClient } from './sheets.js';

// Memory fallback
const memoryConsents = new Map();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Consent ‡∏•‡∏á Sheets
async function saveConsentToSheet(userId, userData) {
  try {
    const sheets = await getSheetsClient();
    if (!sheets) {
      throw new Error('Sheets not available');
    }
    
    const { firstName = '', lastName = '', email = '', consent } = userData;
    
    await sheets.spreadsheets.values.append({
      spreadsheetId: process.env.GOOGLE_SHEET_ID,
      range: 'A:F', // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A ‡∏ñ‡∏∂‡∏á F
      valueInputOption: 'RAW',
      resource: {
        values: [[
          new Date().toISOString(), // Timestamp (A)
          firstName,                // ‡∏ä‡∏∑‡πà‡∏≠ (B)
          lastName,                 // ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (C)
          userId,                   // Line ID (D) - ‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          email,                    // ‡∏≠‡∏µ‡πÄ‡∏°‡∏• (E)
          consent                   // ‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏° (F) - User ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
        ]]
      }
    });
    
    console.log(`‚úÖ Consent saved to Sheets: ${userId}`);
    return true;
  } catch (error) {
    console.warn('‚ö†Ô∏è Cannot save to Sheets, using memory:', error.message);
    // Fallback to memory
    if (userData.consent === '‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°') {
      memoryConsents.set(userId, true);
    }
    return false;
  }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Consent ‡∏à‡∏≤‡∏Å Sheets
async function getUserConsentFromSheet(userId) {
  try {
    const sheets = await getSheetsClient();
    if (!sheets) {
      throw new Error('Sheets not available');
    }
    
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: process.env.GOOGLE_SHEET_ID,
      range: 'A:F', // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    });
    
    const rows = response.data.values || [];
    
    // ‡∏´‡∏≤‡∏ß‡πà‡∏≤ user ‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (column D = Line ID, F = consent)
    const userConsented = rows.find(row => row[3] === userId && row[5] === '‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°');
    
    return userConsented ? { consented: true } : null;
  } catch (error) {
    console.warn('‚ö†Ô∏è Cannot read from Sheets, using memory:', error.message);
    // Fallback to memory
    return memoryConsents.get(userId) ? { consented: true } : null;
  }
}

export async function hasUserConsented(userId) {
  const consentData = await getUserConsentFromSheet(userId);
  return consentData ? consentData.consented : false;
}

export async function handleConsentFlow(event, userMsg, userId) {
  const hasConsented = await hasUserConsented(userId);
  
  // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß -> ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
  if (hasConsented) {
    console.log(`‚úÖ User ${userId} already consented`);
    const { handleFinanceCommand } = await import('./finance.js');
    await handleFinanceCommand(event, userMsg, userId);
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  const userState = memoryConsents.get(userId);

  // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  if (userState === 'collecting_info') {
    await processUserInfo(event, userMsg, userId);
    return;
  }

  // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏° -> ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
  if (userMsg === '‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°') {
    memoryConsents.set(userId, 'collecting_info');
    await replyMessage(event.replyToken,
`‚úÖ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°!

üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß
‡∏ä‡∏∑‡πà‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏≠‡∏µ‡πÄ‡∏°‡∏•

‡πÄ‡∏ä‡πà‡∏ô: 
‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ somchai@email.com`
    );
  } 
  else if (userMsg === '‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°') {
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
    await saveConsentToSheet(userId, { consent: '‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°' });
    await replyMessage(event.replyToken, 
      `‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Nong-Fin ‡πÑ‡∏î‡πâ
‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏à ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°" ‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤`
    );
  }
  else {
    await sendConsentForm(event.replyToken, userId);
  }
}

// ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
async function processUserInfo(event, userMsg, userId) {
  const parts = userMsg.split(' ');
  
  if (parts.length >= 3) {
    const firstName = parts[0];
    const lastName = parts[1];
    const email = parts[2];

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Sheets
    const saved = await saveConsentToSheet(userId, {
      firstName: firstName,
      lastName: lastName,
      email: email,
      consent: '‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°'
    });

    if (saved) {
      memoryConsents.set(userId, true);
      await replyMessage(event.replyToken,
        `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! 
‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì ${firstName}

‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏à‡∏≥‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏ß‡πâ
‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Nong-Fin ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß üòä`
      );
    } else {
      // Fallback to memory
      memoryConsents.set(userId, true);
      await replyMessage(event.replyToken,
        `‚úÖ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì ${firstName}
‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß üëç`
      );
    }
  } else {
    await replyMessage(event.replyToken,
      `‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå: ‡∏ä‡∏∑‡πà‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏≠‡∏µ‡πÄ‡∏°‡∏•

‡πÄ‡∏ä‡πà‡∏ô: ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ somchai@email.com`
    );
  }
}

export async function sendConsentForm(replyToken, userId) {
  const consentMessage = 
`üìã *‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Nong-Fin*

‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ÊÇ®ÁöÑ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£  
‚úÖ ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô

*‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö*

‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°"`;

  await replyMessage(replyToken, consentMessage);
}
