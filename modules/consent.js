import { replyMessage } from './utils.js';
import { getSheetsClient } from './sheets.js';

// Google Sheets configuration
const SHEET_NAME = 'Finway_PDPA_Consent';
const SPREADSHEET_ID = process.env.GOOGLE_SHEET_ID;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Consent ‡∏•‡∏á Google Sheets
async function saveConsentToSheet(userId, consentResult) {
  try {
    const sheets = await getSheetsClient();
    
    await sheets.spreadsheets.values.append({
      spreadsheetId: SPREADSHEET_ID,
      range: `${SHEET_NAME}!A:F`,
      valueInputOption: 'RAW',
      insertDataOption: 'INSERT_ROWS',
      resource: {
        values: [[
          new Date().toISOString(), // Timestamp
          '',                       // name (‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á)
          '',                       // surname (‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á)
          userId,                   // line ID (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î)
          '',                       // Phone number (‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á)
          consentResult             // consent result
        ]]
      }
    });
    
    console.log(`‚úÖ Consent saved for LINE ID: ${userId}`);
  } catch (error) {
    console.error('‚ùå Error saving consent to sheet:', error.message);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Consent ‡∏à‡∏≤‡∏Å Google Sheets (‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏≤‡∏Å Line ID)
async function getUserConsentFromSheet(userId) {
  try {
    const sheets = await getSheetsClient();
    
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: `${SHEET_NAME}!A:F`,
    });
    
    const rows = response.data.values || [];
    
    // üîç ‡∏´‡∏≤‡∏à‡∏≤‡∏Å Line ID (column D) ‡∏ß‡πà‡∏≤‡∏°‡∏µ record ‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà accepted ‡∏ö‡πâ‡∏≤‡∏á
    const userAcceptedRecords = rows.filter(row => 
      row[3] === userId && row[5] === 'accepted' // column D = Line ID, column F = consent result
    );
    
    if (userAcceptedRecords.length > 0) {
      const latestRecord = userAcceptedRecords[userAcceptedRecords.length - 1];
      return {
        consented: true,
        consentedAt: new Date(latestRecord[0]), // column A = timestamp
        lineId: latestRecord[3]                 // column D = Line ID
      };
    }
    
    return null; // ‡πÑ‡∏°‡πà‡∏û‡∏ö record ‡∏ó‡∏µ‡πà accepted
  } catch (error) {
    console.error('‚ùå Error reading consent from sheet:', error.message);
    return null;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á Consent Form
export async function sendConsentForm(replyToken, userId) {
  const consentMessage = 
`üìã *‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Nong-Fin*

‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏ö‡∏≠‡∏ó Nong-Fin ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ÊÇ®ÁöÑ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£:

‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
‚úÖ ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô

*‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô*

‡∏´‡∏≤‡∏Å‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö"
‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö"`;

  await replyMessage(replyToken, consentMessage);
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏à‡∏≤‡∏Å Line ID)
export async function hasUserConsented(userId) {
  try {
    const consentData = await getUserConsentFromSheet(userId);
    return consentData ? consentData.consented : false;
  } catch (error) {
    console.error('‚ùå Error checking user consent:', error.message);
    return false;
  }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Consent Flow
export async function handleConsentFlow(event, userMsg, userId) {
  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Line ID ‡∏ß‡πà‡∏≤‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  const hasConsented = await hasUserConsented(userId);
  
  if (hasConsented) {
    console.log(`‚úÖ User ${userId} already consented - proceeding to finance`);
    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß -> ‡∏™‡πà‡∏á‡πÑ‡∏õ finance
    const { handleFinanceCommand } = await import('./finance.js');
    await handleFinanceCommand(event, userMsg, userId);
    return;
  }

  // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏° -> ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
  if (userMsg === '‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö') {
    console.log(`‚úÖ User ${userId} accepted consent`);
    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å consent accepted
    await saveConsentToSheet(userId, 'accepted');
    await replyMessage(event.replyToken, 
      `‚úÖ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à! 
‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Nong-Fin ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß

‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î`);
  } 
  else if (userMsg === '‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö') {
    console.log(`‚ùå User ${userId} rejected consent`);
    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å consent rejected
    await saveConsentToSheet(userId, 'rejected');
    await replyMessage(event.replyToken, 
      `‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Nong-Fin ‡πÑ‡∏î‡πâ
‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏à ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö" ‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤`);
  }
  else {
    // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ -> ‡∏™‡πà‡∏á consent form ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    console.log(`üìã Sending consent form to user ${userId}`);
    await sendConsentForm(event.replyToken, userId);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ Consent ‡∏Ç‡∏≠‡∏á user (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging)
export async function getUserConsentHistory(userId) {
  try {
    const sheets = await getSheetsClient();
    
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: `${SHEET_NAME}!A:F`,
    });
    
    const rows = response.data.values || [];
    
    // ‡∏´‡∏≤‡∏ó‡∏∏‡∏Å record ‡∏Ç‡∏≠‡∏á Line ID ‡∏ô‡∏µ‡πâ
    const userRecords = rows.filter(row => row[3] === userId);
    return userRecords.map(record => ({
      timestamp: record[0],
      consentResult: record[5]
    }));
  } catch (error) {
    console.error('‚ùå Error getting user consent history:', error.message);
    return [];
  }
}
