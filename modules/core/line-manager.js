const axios = require('axios');

class LineManager {
  static async sendMessage(replyToken, message) {
    try {
      const response = await axios.post(
        'https://api.line.me/v2/bot/message/reply',
        {
          replyToken: replyToken,
          messages: Array.isArray(message) ? message : [message]
        },
        {
          headers: {
            'Authorization': `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
            'Content-Type': 'application/json'
          }
        }
      );
      console.log('‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return { success: true, data: response.data };
    } catch (error) {
      console.error('‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', error.response?.data);
      return { success: false, error: error.message };
    }
  }

  static async sendTextMessage(replyToken, text) {
    return await this.sendMessage(replyToken, {
      type: 'text',
      text: text
    });
  }

  static async sendFlexMessage(replyToken, flexContent) {
    return await this.sendMessage(replyToken, {
      type: 'flex',
      altText: 'Flex Message',
      contents: flexContent
    });
  }

  static async getUserProfile(userId) {
    try {
      const response = await axios.get(
        `https://api.line.me/v2/bot/profile/${userId}`,
        {
          headers: {
            'Authorization': `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`
          }
        }
      );
      return { success: true, profile: response.data };
    } catch (error) {
      console.error('‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', error.response?.data);
      return { success: false, profile: null };
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ replyToken)
   */
  static async sendTextMessageToUser(userId, text) {
    try {
      const response = await axios.post(
        'https://api.line.me/v2/bot/message/push',
        {
          to: userId,
          messages: [{
            type: 'text',
            text: text
          }]
        },
        {
          headers: {
            'Authorization': `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
            'Content-Type': 'application/json'
          }
        }
      );
      console.log('‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      return { success: true, data: response.data };
    } catch (error) {
      console.error('‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', error.response?.data);
      return { success: false, error: error.message };
    }
  }

  /**
   * ‡∏ú‡∏π‡∏Å Rich Menu ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
   */
  static async linkRichMenuToUser(userId, richMenuId = null) {
    try {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏ richMenuId ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ default
      const targetRichMenuId = richMenuId || process.env.DEFAULT_RICH_MENU_ID;
      
      if (!targetRichMenuId) {
        console.log('‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ Rich Menu ID ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î');
        // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ó‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Rich Menu
        await this.sendTextMessageToUser(userId, 'üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Nong Fin! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á');
        return { success: false, error: 'No Rich Menu ID specified' };
      }

      const response = await axios.post(
        `https://api.line.me/v2/bot/user/${userId}/richmenu/${targetRichMenuId}`,
        {},
        {
          headers: {
            'Authorization': `Bearer ${process.env.LINE_CHANNEL_ACCESS_TOKEN}`,
            'Content-Type': 'application/json'
          }
        }
      );
      
      console.log(`‚úÖ ‡∏ú‡∏π‡∏Å Rich Menu ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId}`);
      return { success: true, data: response.data };
    } catch (error) {
      console.error('‚ùå ‡∏ú‡∏π‡∏Å Rich Menu ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', error.response?.data);
      // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ó‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Rich Menu ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      await this.sendTextMessageToUser(userId, 'üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Nong Fin!');
      return { success: false, error: error.message };
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Confirm Template (Rich Message)
   */
  static async sendConfirmTemplate(replyToken, altText, text, actions) {
    return await this.sendMessage(replyToken, {
      type: 'template',
      altText: altText,
      template: {
        type: 'confirm',
        text: text,
        actions: actions
      }
    });
  }

  /**
   * ‡∏™‡πà‡∏á Consent Message ‡πÅ‡∏ö‡∏ö Confirm Template
   */
  static async sendConsentMessage(replyToken) {
    return await this.sendConfirmTemplate(
      replyToken,
      '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°',
      '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Nong Fin',
      [
        {
          type: 'message',
          label: '‚úÖ ‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°',
          text: '‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°'
        },
        {
          type: 'message',
          label: '‚ùå ‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°',
          text: '‡πÑ‡∏°‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°'
        }
      ]
    );
  }

  /**
   * ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° method ‡πÉ‡∏´‡∏°‡πà: ‡∏™‡πà‡∏á Consent Flex Message
   */
  static async sendConsentFlexMessage(replyToken) {
    try {
      const { createConsentFlex } = require('../messages/flex-consent');
      const flexContent = createConsentFlex();
      return await this.sendFlexMessage(replyToken, flexContent.contents);
    } catch (error) {
      console.error('‚ùå ‡∏™‡πà‡∏á Consent Flex Message ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', error);
      // ‚úÖ Fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ Confirm Template ‡∏ñ‡πâ‡∏≤ Flex ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      return await this.sendConsentMessage(replyToken);
    }
  }
}

module.exports = LineManager;
